AWSTemplateFormatVersion: 2010-09-09
Description: Create a VPC for MarkLogic cluster
Metadata:
  version: 11.0.3
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: 'VPC Configuration'
        Parameters:
          - MultiZone
          - AZ
          - VpcCidr
          - PrivateSubnet1Cidr
          - PrivateSubnet2Cidr
          - PrivateSubnet3Cidr
          - PublicSubnet1Cidr
          - PublicSubnet2Cidr
          - PublicSubnet3Cidr
    ParameterLabels:
      MultiZone:
        default: Multiple Zone
      AZ:
        default: Availability Zone
      VpcCidr:
        default: 'VPC CIDR'
      PrivateSubnet1Cidr:
        default: 'Private Subnet 1 CIDR'
      PrivateSubnet2Cidr:
        default: 'Private Subnet 2 CIDR'
      PrivateSubnet3Cidr:
        default: 'Private Subnet 3 CIDR'
      PublicSubnet1Cidr:
        default: 'Public Subnet 1 CIDR'
      PublicSubnet2Cidr:
        default: 'Public Subnet 2 CIDR'
      PublicSubnet3Cidr:
        default: 'Public Subnet 3 CIDR'
Parameters:
  MultiZone:
    Description: Whether there are the cluster will be deployed to multiple Availability Zones.
    Type: String
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'true'
  AZ:
    Description: The Availability Zones for subnets. Accept either 1 zone or 3 different zones. In the order of Subnet 1, Subnet 2 and Subnet 3 (if applicable).
    Type: 'List<AWS::EC2::AvailabilityZone::Name>'
  VpcCidr:
    Description: CIDR Block for the Virtual Private Cloud (VPC).
    Type: String
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    Default: 10.0.0.0/16
    ConstraintDescription: CIDR block must be in format x.x.x.x/16-28
  PrivateSubnet1Cidr:
    Description: CIDR Block for the private subnet 1.
    Type: String
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    Default: 10.0.0.0/23
    ConstraintDescription: CIDR block must be in format x.x.x.x/16-28
  PrivateSubnet2Cidr:
    Description: CIDR Block for the private subnet 2. Only applicable to multi-zone cluster.
      Only applicable to multi-zone cluster.
    Type: String
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    Default: 10.0.32.0/23
    ConstraintDescription: CIDR block must be in format x.x.x.x/16-28
  PrivateSubnet3Cidr:
    Description: CIDR Block for the private subnet 3. Only applicable to multi-zone cluster.
      Only applicable to multi-zone cluster.
    Type: String
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    Default: 10.0.64.0/23
    ConstraintDescription: CIDR block must be in format x.x.x.x/16-28
  PublicSubnet1Cidr:
    Description: CIDR Block for the public subnet 1.
    Type: String
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    Default: 10.0.96.0/23
    ConstraintDescription: CIDR block must be in format x.x.x.x/16-28
  PublicSubnet2Cidr:
    Description: CIDR Block for the public subnet 2. Only applicable to multi-zone cluster.
      Only applicable to multi-zone cluster.
    Type: String
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    Default: 10.0.128.0/23
    ConstraintDescription: CIDR block must be in format x.x.x.x/16-28
  PublicSubnet3Cidr:
    Description: CIDR Block for the public subnet 3. Only applicable to multi-zone cluster.
      Only applicable to multi-zone cluster.
    Type: String
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    Default: 10.0.160.0/23
    ConstraintDescription: CIDR block must be in format x.x.x.x/16-28
Conditions:
  DeployMultiZone: !Equals [!Ref MultiZone, 'true']
Resources:
  MarkLogicVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsHostnames: 'true'
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn:
      - MarkLogicVPC
    Properties:
      VpcId: !Ref MarkLogicVPC
      CidrBlock: !Ref PublicSubnet1Cidr
      AvailabilityZone: !Select [0, !Ref AZ]
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Condition: DeployMultiZone
    DependsOn:
      - MarkLogicVPC
    Properties:
      VpcId: !Ref MarkLogicVPC
      CidrBlock: !Ref PublicSubnet2Cidr
      AvailabilityZone: !Select [1, !Ref AZ]
  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Condition: DeployMultiZone
    DependsOn:
      - MarkLogicVPC
    Properties:
      VpcId: !Ref MarkLogicVPC
      CidrBlock: !Ref PublicSubnet3Cidr
      AvailabilityZone: !Select [2, !Ref AZ]
  NatEip:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: vpc
  NatGateway:
    Type: "AWS::EC2::NatGateway"
    DependsOn:
      - NatEip
      - PublicSubnet1
    Properties:
      AllocationId: !GetAtt NatEip.AllocationId
      SubnetId: !Ref PublicSubnet1
  VpcGateway:
    Type: AWS::EC2::InternetGateway
  VpcGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn:
      - MarkLogicVPC
      - VpcGateway
    Properties:
      InternetGatewayId: !Ref VpcGateway
      VpcId: !Ref MarkLogicVPC
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn:
      - MarkLogicVPC
    Properties:
      VpcId: !Ref MarkLogicVPC
      CidrBlock: !Ref PrivateSubnet1Cidr
      AvailabilityZone: !Select [0, !Ref AZ]
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Condition: DeployMultiZone
    DependsOn:
      - MarkLogicVPC
    Properties:
      VpcId: !Ref MarkLogicVPC
      CidrBlock: !Ref PrivateSubnet2Cidr
      AvailabilityZone: !Select [1, !Ref AZ]
  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Condition: DeployMultiZone
    DependsOn:
      - MarkLogicVPC
    Properties:
      VpcId: !Ref MarkLogicVPC
      CidrBlock: !Ref PrivateSubnet3Cidr
      AvailabilityZone: !Select [2, !Ref AZ]
  PrivateSubnetRouteTable:
    Type: "AWS::EC2::RouteTable"
    DependsOn:
      - MarkLogicVPC
    Properties:
      VpcId: !Ref MarkLogicVPC
  PrivateRtAssoc1:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    DependsOn:
      - PrivateSubnetRouteTable
      - PrivateSubnet1
    Properties:
      RouteTableId: !Ref PrivateSubnetRouteTable
      SubnetId: !Ref PrivateSubnet1
  PrivateRtAssoc2:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Condition: DeployMultiZone
    DependsOn:
      - PrivateSubnetRouteTable
      - PrivateSubnet2
    Properties:
      RouteTableId: !Ref PrivateSubnetRouteTable
      SubnetId: !Ref PrivateSubnet2
  PrivateRtAssoc3:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Condition: DeployMultiZone
    DependsOn:
      - PrivateSubnetRouteTable
      - PrivateSubnet3
    Properties:
      RouteTableId: !Ref PrivateSubnetRouteTable
      SubnetId: !Ref PrivateSubnet3
  RoutePrivate:
    Type: AWS::EC2::Route
    DependsOn:
      - PrivateSubnetRouteTable
      - NatGateway
    Properties:
      RouteTableId: !Ref PrivateSubnetRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway
  PublicSubnetRouteTable:
    Type: "AWS::EC2::RouteTable"
    DependsOn:
      - MarkLogicVPC
    Properties:
      VpcId: !Ref MarkLogicVPC
  PublicRtAssoc1:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    DependsOn:
      - PublicSubnetRouteTable
      - PublicSubnet1
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      SubnetId: !Ref PublicSubnet1
  PublicRtAssoc2:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Condition: DeployMultiZone
    DependsOn:
      - PublicSubnetRouteTable
      - PublicSubnet2
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      SubnetId: !Ref PublicSubnet2
  PublicRtAssoc3:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Condition: DeployMultiZone
    DependsOn:
      - PublicSubnetRouteTable
      - PublicSubnet3
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      SubnetId: !Ref PublicSubnet3
  RoutePublic:
    Type: AWS::EC2::Route
    DependsOn:
      - PublicSubnetRouteTable
      - VpcGateway
      - VpcGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref VpcGateway
  EndpointSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    DependsOn: MarkLogicVPC
    Properties:
      GroupDescription: Enable SSH access and HTTP access on the inbound port
      VpcId: !Ref MarkLogicVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
  EndpointSecurityGroupIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    DependsOn:
      - EndpointSecurityGroup
    Properties:
      IpProtocol: tcp
      FromPort: '0'
      ToPort: '65355'
      GroupId: !Ref EndpointSecurityGroup
      SourceSecurityGroupId: !Ref EndpointSecurityGroup
  DDBEndPoint:
    Type: 'AWS::EC2::VPCEndpoint'
    DependsOn:
      - MarkLogicVPC
      - PrivateSubnetRouteTable
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: '*'
            Resource: '*'
      RouteTableIds:
        - !Ref PrivateSubnetRouteTable
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.dynamodb"
      VpcId: !Ref MarkLogicVPC
  S3EndPoint:
    Type: 'AWS::EC2::VPCEndpoint'
    DependsOn:
      - MarkLogicVPC
      - PrivateSubnetRouteTable
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: '*'
            Resource: '*'
      RouteTableIds:
        - !Ref PrivateSubnetRouteTable
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.s3"
      VpcId: !Ref MarkLogicVPC
  Ec2Endpoint:
    Type: "AWS::EC2::VPCEndpoint"
    DependsOn:
      - MarkLogicVPC
    Properties:
      VpcId: !Ref MarkLogicVPC
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ec2'
      VpcEndpointType: "Interface"
      PrivateDnsEnabled: 'true'
      SubnetIds: !If
        - DeployMultiZone
        - - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
          - !Ref PrivateSubnet3
        - - !Ref PrivateSubnet1
      SecurityGroupIds:
        - !Ref EndpointSecurityGroup
  ElbEndpoint:
    Type: "AWS::EC2::VPCEndpoint"
    DependsOn:
      - MarkLogicVPC
    Properties:
      VpcId: !Ref MarkLogicVPC
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.elasticloadbalancing'
      VpcEndpointType: "Interface"
      PrivateDnsEnabled: 'true'
      SubnetIds: !If
        - DeployMultiZone
        - - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
          - !Ref PrivateSubnet3
        - - !Ref PrivateSubnet1
      SecurityGroupIds:
        - !Ref EndpointSecurityGroup
  KmsEndpoint:
    Type: "AWS::EC2::VPCEndpoint"
    DependsOn:
      - MarkLogicVPC
    Properties:
      VpcId: !Ref MarkLogicVPC
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.kms'
      VpcEndpointType: "Interface"
      PrivateDnsEnabled: 'true'
      SubnetIds: !If
        - DeployMultiZone
        - - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
          - !Ref PrivateSubnet3
        - - !Ref PrivateSubnet1
      SecurityGroupIds:
        - !Ref EndpointSecurityGroup
  SnsInterfaceEndpoint:
    Type: "AWS::EC2::VPCEndpoint"
    DependsOn:
      - MarkLogicVPC
    Properties:
      VpcId: !Ref MarkLogicVPC
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.sns'
      VpcEndpointType: "Interface"
      PrivateDnsEnabled: 'true'
      SubnetIds: !If
        - DeployMultiZone
        - - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
          - !Ref PrivateSubnet3
        - - !Ref PrivateSubnet1
      SecurityGroupIds:
        - !Ref EndpointSecurityGroup
Outputs:
  VpcId:
    Description: VPC ID
    Value: !Ref MarkLogicVPC
  PrivateSubnet1Id:
    Description: Private Subnet 1 ID
    Value: !Ref PrivateSubnet1
  PrivateSubnet2Id:
    Description: Private Subnet 2 ID
    Value: !If [DeployMultiZone, !Ref PrivateSubnet2, '']
  PrivateSubnet3Id:
    Description: Private Subnet 3 ID
    Value: !If [DeployMultiZone, !Ref PrivateSubnet3, '']
  PublicSubnet1Id:
    Description: Public Subnet 1 ID
    Value: !Ref PublicSubnet1
  PublicSubnet2Id:
    Description: Public Subnet 2 ID
    Value: !If [DeployMultiZone, !Ref PublicSubnet2, '']
  PublicSubnet3Id:
    Description: Public Subnet 3 ID
    Value: !If [DeployMultiZone, !Ref PublicSubnet3, '']
  PrivateSubnetRouteTableID:
    Description: Private Subnet Route Table ID
    Value: !Ref PrivateSubnetRouteTable
